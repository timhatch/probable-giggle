//     Promise.js 1.0.0
//     github.com/jakearchibald/es6-promise
//     (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors
!function(){var t,n,e,r;!function(){var o={},i={};t=function(t,n,e){o[t]={deps:n,callback:e}},r=e=n=function(t){function e(n){if("."!==n.charAt(0))return n;for(var e=n.split("/"),r=t.split("/").slice(0,-1),o=0,i=e.length;i>o;o++){var s=e[o];if(".."===s)r.pop();else{if("."===s)continue;r.push(s)}}return r.join("/")}if(r._eak_seen=o,i[t])return i[t];if(i[t]={},!o[t])throw new Error("Could not find module "+t);for(var s=o[t],c=s.deps,u=s.callback,a=[],f,l=0,p=c.length;p>l;l++)a.push("exports"===c[l]?f={}:n(e(c[l])));var h=u.apply(this,a);return i[t]=f||h}}(),t("promise/all",["./utils","exports"],function(t,n){"use strict";function e(t){var n=this;if(!r(t))throw new TypeError("You must pass an array to all.");return new n(function(n,e){function r(t){return function(n){i(t,n)}}function i(t,e){s[t]=e,0===--c&&n(s)}var s=[],c=t.length,u;0===c&&n([]);for(var a=0;a<t.length;a++)u=t[a],u&&o(u.then)?u.then(r(a),e):i(a,u)})}var r=t.isArray,o=t.isFunction;n.all=e}),t("promise/asap",["exports"],function(t){"use strict";function n(){return function(){process.nextTick(o)}}function e(){var t=0,n=new c(o),e=document.createTextNode("");return n.observe(e,{characterData:!0}),function(){e.data=t=++t%2}}function r(){return function(){u.setTimeout(o,1)}}function o(){for(var t=0;t<a.length;t++){var n=a[t],e=n[0],r=n[1];e(r)}a=[]}function i(t,n){var e=a.push([t,n]);1===e&&f()}var s="undefined"!=typeof window?window:{},c=s.MutationObserver||s.WebKitMutationObserver,u="undefined"!=typeof global?global:void 0===this?window:this,a=[],f;f="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?n():c?e():r(),t.asap=i}),t("promise/config",["exports"],function(t){"use strict";function n(t,n){return 2!==arguments.length?e[t]:void(e[t]=n)}var e={instrument:!1};t.config=e,t.configure=n}),t("promise/polyfill",["./promise","./utils","exports"],function(t,n,e){"use strict";function r(){var t;t="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var n="Promise"in t&&"resolve"in t.Promise&&"reject"in t.Promise&&"all"in t.Promise&&"race"in t.Promise&&function(){var n;return new t.Promise(function(t){n=t}),i(n)}();n||(t.Promise=o)}var o=t.Promise,i=n.isFunction;e.polyfill=r}),t("promise/promise",["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],function(t,n,e,r,o,i,s,c){"use strict";function u(t){if(!j(t))throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");if(!(this instanceof u))throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._subscribers=[],a(t,this)}function a(t,n){function e(t){v(n,t)}function r(t){m(n,t)}try{t(e,r)}catch(o){r(o)}}function f(t,n,e,r){var o=j(e),i,s,c,u;if(o)try{i=e(r),c=!0}catch(a){u=!0,s=a}else i=r,c=!0;h(n,i)||(o&&c?v(n,i):u?m(n,s):t===Y?v(n,i):t===M&&m(n,i))}function l(t,n,e,r){var o=t._subscribers,i=o.length;o[i]=n,o[i+Y]=e,o[i+M]=r}function p(t,n){for(var e,r,o=t._subscribers,i=t._detail,s=0;s<o.length;s+=3)e=o[s],r=o[s+n],f(n,e,r,i);t._subscribers=null}function h(t,n){var e=null,r;try{if(t===n)throw new TypeError("A promises callback cannot return that same promise.");if(_(n)&&(e=n.then,j(e)))return e.call(n,function(e){return r?!0:(r=!0,void(n!==e?v(t,e):d(t,e)))},function(n){return r?!0:(r=!0,void m(t,n))}),!0}catch(o){return r?!0:(m(t,o),!0)}return!1}function v(t,n){t===n?d(t,n):h(t,n)||d(t,n)}function d(t,n){t._state===O&&(t._state=D,t._detail=n,b.async(w,t))}function m(t,n){t._state===O&&(t._state=D,t._detail=n,b.async(y,t))}function w(t){p(t,t._state=Y)}function y(t){p(t,t._state=M)}var b=t.config,g=t.configure,_=n.objectOrFunction,j=n.isFunction,x=n.now,P=e.all,T=r.race,F=o.resolve,A=i.reject,E=s.asap,k=0;b.async=E;var O=void 0,D=0,Y=1,M=2;u.prototype={constructor:u,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(t,n){var e=this,r=new this.constructor(function(){});if(this._state){var o=arguments;b.async(function i(){f(e._state,r,o[e._state-1],e._detail)})}else l(this,r,t,n);return r},"catch":function(t){return this.then(null,t)}},u.all=P,u.race=T,u.resolve=F,u.reject=A,c.Promise=u}),t("promise/race",["./utils","exports"],function(t,n){"use strict";function e(t){var n=this;if(!r(t))throw new TypeError("You must pass an array to race.");return new n(function(n,e){for(var r=[],o,i=0;i<t.length;i++)o=t[i],o&&"function"==typeof o.then?o.then(n,e):n(o)})}var r=t.isArray;n.race=e}),t("promise/reject",["exports"],function(t){"use strict";function n(t){var n=this;return new n(function(n,e){e(t)})}t.reject=n}),t("promise/resolve",["exports"],function(t){"use strict";function n(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var n=this;return new n(function(n){n(t)})}t.resolve=n}),t("promise/utils",["exports"],function(t){"use strict";function n(t){return e(t)||"object"==typeof t&&null!==t}function e(t){return"function"==typeof t}function r(t){return"[object Array]"===Object.prototype.toString.call(t)}var o=Date.now||function(){return(new Date).getTime()};t.objectOrFunction=n,t.isFunction=e,t.isArray=r,t.now=o}),n("promise/polyfill").polyfill()}();

/***********************************
* CODEKIT DECLARATIONS
***********************************/

/* global _        */
/* global Backbone */
/* global App      */
/* global Promise  */

/* @codekit-prepend "promise-1.0.0.min.js" */

// Use a Mustache syntax within underscore's templating mechanism
_.templateSettings = {
  evaluate : /\{\[([\s\S]+?)\]\}/g,
  interpolate : /\{\{([\s\S]+?)\}\}/g
}

window.App = window.App || {}
Backbone.View = Backbone.NativeView
App.AjaxMixin = {
  /*
  * ajaxRequest(): Really simple Promises A inclined XMLHttpRequest
  * Parameters:
  *   type = 'GET' or 'POST'.
  *   url  = The url target. For 'GET' requests this includes any query parameters. For 
  *   'POST' requests it will be the base url only.
  *   data = (not used for 'GET' requests) the data to be 'posted'.
  * Example:
  *   GET request:  this.ajaxRequest('GET', url)
  *   POST request: this.ajaxRequest('POST', url, data)
  *
  * NOTE: This function will not respect redirects
  * NOTE: Requires that the server-script returns a JSON-encoded response
  */
  ajaxRequest: function(type, url, data){

    return new Promise(function(resolve, reject){
      var client  = new XMLHttpRequest(),
      handler = function(){
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(JSON.parse(this.response))
          } else {
            reject(this)
          }
        }
      }

    client.open(type, url)
    client.onreadystatechange = handler
    client.setRequestHeader('Accept', 'application/json')
    if (type === 'POST') {
      client.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
    }
    client.send(data)
    })
  }
}

/**********************************************************
* Boulder model extending Backbone.js 'Model' class
**********************************************************/

App.Bloc = Backbone.Model.extend({
  /* Inherited properties */
  resmx   : [10, 7, 4, 1, 0],
  defaults: {
    state : 4,          // check state
    score : 0,
    bonus : 0
  },

  /*
  * Set the score and bonus attributes
  */
  setResult: function(i){
    i = parseInt(i,10)
    this.attributes.score = (i < 3) ? this.resmx[i] : 0
    this.attributes.bonus = (i < 4) ? 1 : 0

    this.set({"state" : i})
  }
})

/**********************************************************
* Boulder view extending Backbone.js 'View' class
**********************************************************/

App.BlocView = Backbone.View.extend({
  tagName   : 'div',
  className : 'tile',
  model     : App.Bloc,
  events    : {
    // "click  input[type=radio]" : "updateFromRdio",
    "change input[type=text]"  : 'updateFromText'
  },

  /*
  * initialize(): Bind the change event of this.model to this.update()
  */
  initialize: function(){ this.listenTo(this.model, 'change', this.update, this) },

  /*
  * Render the view from its template
  */
  render: function(){
    var templateFunc  = _.template(document.getElementById('boulder_tmpl').textContent)
    this.el.innerHTML = templateFunc({ id : this.model.get('id') })

    // Create a reference to the data entry and status indicator elements
    this.textCell = this.el.querySelector('input[type="text"]')
    this.nodeList = this.el.getElementsByClassName('flag')

    this.update()
    return this
  },

  /*
  * updateFromText() : Update the score from data entered using the keyboard
  */
  updateFromText: function(){
    // Get the value of the textfield and set the model 'state'
    var el = this.textCell,
      text = el.value,
      new_state = (!text) ? 4 : _(this.model.resmx).indexOf(parseInt(text,10))

    // Strip out any '0's,  flag invalid inputs & set the state so that they're ignored for the
    // purposes of calculating the score
    if (text === '0') el.value = ''
    if (new_state > -1) { el.classList.remove('error') }
    else { el.classList.add('error'); new_state = 4 }

    // Update the model
    this.model.setResult(new_state)
  },

  /*
  * Synchronise the view and model states
  */
  update: function(){
    var i = this.model.get('state'),
      j = (i < 4) ? this.model.resmx[i] : null

    // sync the text and radio states
     this.textCell.value = j

    _(this.nodeList).each(function(el){ el.classList.remove('noerror', 'error') })
    switch (i) {
    case 4:
      window.console.log('do nothing')
      break;
    case 3:
      this.nodeList[i].classList.add('error')
      break;
    default:
      this.nodeList[i].classList.add('noerror')
    }
  }
})


/**********************************************************
* Collection of boulder models
**********************************************************/
/* Model Collection */
App.Result = Backbone.Collection.extend({
  identity  : {
    "PerId"   : null,
    "name"    :'name',
    "code"    : null,
    "category":'m'
  },
  score   : 0,
  bonus   : 0,
  model   : App.Bloc,

  /*
  * Instantiate a collection of models
  * Bind change events (bubbled up from any change to a model) to this.setResult()
  */
  initialize: function(){ this.on('change', this.setResult, this) },

  /*
  * Populate the collection
  */
  populate: function(n){
    while (n) { this.add(new App.Bloc({ "id": 'b'+n })); n-- }
    return this
  },

  /*
  * Get Collection data from the server
  */
  load: function(text){
    var self =  this,
        url  = './scripts/get.php?PerId='+text

    this.ajaxRequest('GET', url)
    .then(function(data){
      self._setIdentity(data.identity)
      self._resetModels(data.results)
    })
    .catch(function(err){ window.console.log(err) })
  },

  _setIdentity: function(identity){
    this.identity = identity
    this.trigger('change:title')
  },
  _resetModels: function(results){
    _(this.models).each(function(model){
      model.setResult(results[model.get('id')])
    })
  },

  /*
  * Set the aggregate result
  */
  setResult: function(){
    this.score = this.bonus = 0
    _(this.models).each(function(model){
      this.score += model.get('score')
      this.bonus += model.get('bonus')
    }, this)
  }
})
_.extend(App.Result.prototype, App.AjaxMixin)
/**********************************************************
  App container
**********************************************************/

App.MainView = Backbone.View.extend({
  el     : document.getElementById('inner'),
  events : {
    "change input#perid"   : 'handleTabEvent',
    // "keypress input#perid"    : 'handleKeyPress',
    "click  button#submit" : 'postResult'
  },
  blocs  : 30,

  /*
  * Initialize() : Init the view
  */
  initialize: function(options){
    var n = options.blocs || this.blocs,
      el  = document.getElementById('tiles'),
      view

    // Bootstrap the collection's models & create the relevant views
    this.collection = new App.Result()
    this.collection.populate(n).each(function(model){
      view = new App.BlocView({ 'model': model })
      el.insertBefore(view.render().el, el.firstChild)
    })
        
    // Cache a reference to the PerId cell
    this.perEl = document.getElementById('perid')

    // Bind the change and change:title event of this.collection to this.update()
    this.listenTo(this.collection, 'change', this.update, this)
    this.listenTo(this.collection, 'change:title', this.update, this)
  },

  /*
  * handleKeyPress() & handleTabEvent()
  * Respond only when the ENTER key is pressed or when the user tabs out of the cell
  */
  // handleKeyPress: function(e){ if (e.keyCode === 13) this.handleTabEvent() },
  handleTabEvent: function(){ if (!!this.perEl.value) this.collection.load(this.perEl.value) },

  /*
  * Respond to a submit event by calling the relevant collection function
  */
  postResult: function(){
    var query = 'PerId='+this.perEl.value+'&models='+JSON.stringify(this.collection)
    this.collection.ajaxRequest('POST', './scripts/post.php', query)
    .then(function(response){ window.console.log(JSON.stringify(response)) })
  },

  /*
  * Update the Identity display
  */
  update: function(){
    // Update the identity data 
    document.getElementById('name').textContent  = this.collection.identity.name
    document.getElementById('grpid').textContent = this.collection.identity.category.toUpperCase()
    // Update the results field
    document.getElementById('result').textContent = this.collection.score+'.'+this.collection.bonus
  }
})

